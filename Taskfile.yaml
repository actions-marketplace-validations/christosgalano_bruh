version: "3"

tasks:
  #### Default ####

  default:
    desc: List all tasks
    cmds:
      - task -l
    silent: true

  #### Install ####

  install:tools:
    desc: Install necessary Go tools
    cmds:
      - go install github.com/mgechev/revive@latest # revive for linting
      - go install gotest.tools/gotestsum@latest # gotestsum for testing
      - go install github.com/securego/gosec/v2/cmd/gosec@latest # gosec for security
      - go install golang.org/x/vuln/cmd/govulncheck@latest # govulncheck for security
    silent: true

  #### Lint ####

  lint:fmt:
    desc: Format code
    aliases:
      - "fmt"
      - "format"
    cmds:
      - gofmt -s -w -l .
    silent: true

  lint:vet:
    desc: Vet code
    aliases:
      - "vet"
    cmds:
      - go vet ./internal/*
      - go vet ./cmd/*
    silent: true

  lint:revive:
    desc: Lint code
    aliases:
      - "rv"
      - "revive"
    cmds:
      - revive -config revive.toml -formatter friendly ./internal/*
      - revive -config revive.toml -formatter friendly ./cmd/*
    silent: true

  lint:all:
    desc: Run all lint tasks
    cmds:
      - task lint:fmt
      - task lint:vet
      - task lint:revive
    silent: true

  #### Test ####

  test:bicep:
    desc: Run tests for bicep package
    aliases:
      - "test:bicep"
    dir: ./internal/bicep
    cmds:
      - gotestsum -f testname
    silent: true

  test:bicep:parse:
    desc: Run tests for bicep package's parse methods
    aliases:
      - "test:update"
      - "test:bicep:update"
    dir: ./internal/bicep
    cmds:
      - gotestsum -f testname -- -run "TestParse"
    silent: true

  test:bicep:update:
    desc: Run tests for bicep package's update methods
    aliases:
      - "test:parse"
    dir: ./internal/bicep
    cmds:
      - gotestsum -f testname -- -run "TestUpdate"
    silent: true

  test:bicep:parse-update:
    desc: Run tests for bicep package's  parse and update methods combined
    aliases:
      - "test:pu"
      - "test:parse-update"
    dir: ./internal/bicep
    cmds:
      - gotestsum -f testname -- -run "TestParseUpdate"
    silent: true

  test:apiversions:
    desc: Run tests for apiversions package
    aliases:
      - "test:apiversions"
      - "test:azapi"
    dir: ./internal/apiversions
    cmds:
      - gotestsum -f testname
    silent: true

  test:all:
    desc: Run all tests for all packages
    aliases:
      - "test:all"
    cmds:
      - printf "---------- bicep ---------------------------------\n\n" && task test:bicep && printf "\n\n"
      - printf "---------- apiversions ---------------------------\n\n" && task test:apiversions && printf "\n\n"
    silent: true

  test:coverage:
    desc: Generate coverage report for all packages
    aliases:
      - "coverage"
    dir: ./internal
    cmds:
      - go test -cover ./bicep
      - go test -cover ./apiversions
    silent: true

  test:minimal:
    desc: Run tests for all packages with minimal output
    aliases:
      - "test:minimal"
      - "test:min"
    dir: ./internal
    cmds:
      - gotestsum -f pkgname
    silent: true

  #### Security ####

  security:all:
    desc: Run all security tasks
    cmds:
      - task security:gosec
      - task security:govulncheck
    silent: true

  security:gosec:
    desc: Run gosec
    aliases:
      - "gosec"
    cmds:
      - gosec -exclude=G104,G107,G118 ./internal/...
      - gosec -exclude=G104,G107,G118 ./cmd/...
    silent: true

  security:govulncheck:
    desc: Run govulncheck
    aliases:
      - "govulncheck"
    cmds:
      - govulncheck -v ./...
      - task build
      - govulncheck -mode=binary ./bin/bruh
    silent: true

  #### Build ####

  build:
    desc: Build binary
    cmds:
      - go build -o ./bin/bruh ./cmd/bruh/main.go
    silent: true

  #### All ####

  all:
    desc: Run all tasks in order
    aliases:
      - "all"
    cmds:
      - printf "---------- LINT ----------------------------------\n\n" && task lint:all
      - printf "---------- TEST ----------------------------------\n\n" && task test:all
      - printf "---------- COVERAGE ------------------------------\n\n" && task test:coverage && printf "\n"
      - printf "---------- SECURITY ------------------------------\n\n" && task security:all  && printf "\n"
      - printf "---------- CLEAN ---------------------------------\n\n" && task clean
    silent: true

  #### Clean ####

  clean:
    desc: Clean binaries
    aliases:
      - "clean"
    cmds:
      - rm ./bin/bruh 2> /dev/null
      - rm -rf ./dist 2> /dev/null
    silent: true
    ignore_error: true
